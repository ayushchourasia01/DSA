int BitonicPT(vector<int>& A, int start,int end)
{
    if(start > end)
    return -1;
    int mid = start+(end-start)/2;
    if(A[mid]>A[mid-1]&&A[mid]>A[mid+1])
    {
        return mid;
    }
    if(A[mid]>A[mid-1]&&A[mid]<A[mid+1])
    {
        return BitonicPT(A,mid+1,end);
    }
    else if(A[mid]<A[mid-1]&&A[mid]>A[mid+1])
    {
        return BitonicPT(A,start,mid-1);
    }
}
int solveAsc(vector<int>& A,int start,int end,int B)
{
    if(start > end)
    return -1;
    int mid = start+(end-start)/2;
    if(A[mid]==B)
    return mid;
    else if(A[mid]>B)
    {
        return solveAsc(A,start,mid-1,B);
    }
    else
        return solveAsc(A,mid+1,end,B);
}
int solveDec(vector<int>& A,int start,int end,int B)
{
    if(start > end)
    return -1;
    int mid = start+(end-start)/2;
    if(A[mid]==B)
    return mid;
    else if(A[mid]>B)
    {
        return solveDec(A,mid+1,end,B);
    }
    else
        return solveDec(A,start,mid-1,B);
}
int Solution::solve(vector<int> &A, int B) {
     int start = 0;
     int end = A.size()-1;
     int index = BitonicPT(A,start,end);
     if(B>A[index])
     return -1;
     else if(B==A[index])
     return index;
     else
     {
         int temp = solveAsc(A,start,index-1,B);
         if(temp!=-1)
         return temp;
         else
         return solveDec(A,index+1,end,B);
     }
}
